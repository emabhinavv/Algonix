// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                       String    @id @default(uuid())
  name                     String?
  email                    String    @unique
  verificationToken        String?
  isVerified               Boolean   @default(false)
  image                    String?
  role                     UserRole  @default(USER)
  password                 String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  problems      Problem[] //here we are creating relation between user and problem that is type of one to many means one user can create multiple problems
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists     Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty //enum
  tags        String[] //means array of string ex ["tag1","tag2","tag3"]
  userId      String //which user created
  examples    Json // used json because in json we have full control in which format we want to send data
  contraints  String
  hints       String?
  editorial   String?

  testCases          Json //in this we recieve input and output example [{"input":"1", "output":"1"},{"input":"2", "output":"2"}]
  codeSnippets       Json
  referenceSolutions Json //whenever creating problem we have to submit reference solution

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationship
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade) //establishing relationship between user and problem created by it if we are telling if user delete then problem should also be deleted for that we are using Cascade
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id             String  @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  compliedOutput String?
  status         String
  memory         String?
  time           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index(submissionId)
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  problems    ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) //unique playlist names per user
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}
